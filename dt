#!/bin/bash

DockerHome=/projects
DTUNHome=/opt/dt
DockerComposeHome=$DTUNHome/data
ListenIP=127.0.33.
DTUNID=DTUN

ExternalInterface=eth0
UseApacheReverseProxy=1

ExternalIp=`ip -br -4 addr show $ExternalInterface|awk '{ split(\$3, m, "/"); print m[1] }'`
env=$1
cmd=$2
params=""

if [ -z $cmd ]; then
    cmd=$1
else
    shift 2
    params=$@
fi;

# Finds first free IP in ListenIP zone
findFreeIp()
{
    min=1;
    lines=`netstat -an|grep -P "$ListenIP?:80"|grep LISTEN|awk '{split($4, r, ":"); split(r[1], r, "."); print r[4]}'|sort -n`
    while read number; do
	if [ -n "$number" ]; then
	    if [ $number -eq $min ]; then
		min=$(($number + 1))
	    fi;
	fi;
    done <<< "$lines"
    echo ${ListenIP}${min}
}
# Generates .env file
generateEnvFile()
{
    name=$1
    ip=$(findFreeIp)
    envFile=$DockerComposeHome/$name/.env
    echo "PROJECT_NAME=$name">$envFile
    echo "LISTEN_IP=$ip">>$envFile
    echo "MAGENTO_MODE=developer">>$envFile
    echo "MYSQL_ROOT_PASSWORD=root">>$envFile
    echo "MYSQL_DATABASE=magento2">>$envFile
}
# Generates MYSQL Config
generateMysqlConfig()
{
    name=$1
    version=$2
    export MYSQL_VERSION=$version && cat $DTUNHome/config/mysql/Dockerfile|envsubst>$DockerComposeHome/$name/config/mysql/Dockerfile
    cp $DTUNHome/config/mysql/base.yml $DockerComposeHome/$name/config/mysql/base.yml
}
# Generates PHP Config
generatePhpConfig()
{
    name=$1
    dphpVersion=$2
    export PHP_VERSION=$dphpVersion && cat $DTUNHome/config/php/Dockerfile|envsubst>$DockerComposeHome/$name/config/php/Dockerfile
    cp $DTUNHome/config/php/base.yml $DockerComposeHome/$name/config/php/base.yml
}
# Initializes docker environment
initializeDockerComposer()
{
    envName=$1
    shift 1
    ver_php=7.1
    ver_mysql=5.6
    for argument in $@; do
	case $argument in 
	    --mysql=*)
		ver_mysql="${argument#*=}"
		shift
	    ;;
	    --php=*)
		ver_php="${argument#*=}"
		shift
	    ;;
	esac;
    done 
    if [ -d $DockerHome/$envName ]; then
	echo "Initializing docker environment for $DockerHome/$envName in $DockerComposeHome..."
	mkdir -p $DockerComposeHome/$envName/data/mysql $DockerComposeHome/$envName/config $DockerComposeHome/$envName/config/php $DockerComposeHome/$envName/config/mysql
	if [ ! -e $DockerComposeHome/$envName/data/html ]; then
	    ln -f -s $DockerHome/$envName $DockerComposeHome/$envName/data/html
	fi;
	generatePhpConfig $envName $ver_php
	generateMysqlConfig $envName $ver_mysql
	cat $DTUNHome/config/docker-compose.yml|envsubst>$DockerComposeHome/$envName/docker-compose.yml
    else
	echo "FATAL: $DockerHome/$envName not found"
    fi;
}
# Starts docker environment
startDockerEnvironment()
{
    echo "Starting $1..."
    generateEnvFile $1
    cd $DockerComposeHome/$1 && screen -dmS $1 docker-compose up --build
}
# Stops docker environment
stopDockerEnvironment()
{
    cd $DockerComposeHome/$1 && docker-compose down
}
# Generates hosts file
generateHostsFile()
{
    sed '/DTUNHostsStart/q' /etc/hosts
    generateHostsFileInsertion
    awk '/DTUNHostsEnd/,EOF' /etc/hosts
}
# Generates hosts list
generateHostsFileInsertion()
{
    cmd="docker ps --format '{{.Ports}} {{.Names}}'|grep web|awk 'BEGIN {ORS=\" \"}; {c=split(\$0, s); for(n=1; n<=c; n++) { if ((s[n] ~ \"$ListenIP*\") || (s[n] ~ \"web\")) print s[n]}; print \"\\n\"};'"
    list=$(eval $cmd)
    while read entry; do
	if [ -n "$entry" ]; then
	    ip=$(echo $entry|awk 'BEGIN {ORS=""}; {split($1, r, ":"); print r[1];};')
	    name=$(echo $entry|awk 'BEGIN {ORS=""}; {split($2, r, "-web"); print r[1];};')
	    echo "# DT $name"
	    echo -e "$ip\t$name.loc"
	    echo -e "$ip\tdc.$name.loc"
	    if [ -e "$DockerComposeHome/$name/config/php/aliases" ]; then
		while read line; do
		    echo -e "$ip\t$line"
		done < "$DockerComposeHome/$name/config/php/aliases"
	    fi;
	    echo "# /DT $name"
	fi;
    done <<< "$list"
}
#' Generates VHosts for reverse proxy
generateVHosts()
{
    cmd="docker ps --format '{{.Names}}'|grep web"
    list=$(eval $cmd)
    while read entry; do
	name=`echo $entry|awk '{split($1, m, "-web"); print m[1]; }'`
	export ENV_NAME=$name && cat $DTUNHome/config/php/vhost.conf|envsubst > /etc/apache2/sites-available/$name.conf
	sudo /usr/sbin/a2ensite $name
    done <<< "$list"
}
# Executes application on container
executeApp()
{
    env=$1
    cnt=$2
    chdir=$3
    shift 3
    app=$@
    cid="docker ps --format {{.ID}} --filter name=$env-$cnt"
    cid=$($cid)
    docker exec --workdir $chdir --user $(id -u) -ti $cid $app
}
# CMD switch
case "$cmd" in
    dt-setup)
	chown :docker /etc/hosts
	chmod g=rw /etc/hosts
	added=`cat /etc/hosts|grep DTUNHostsStart`
	if [ -z "$added" ]; then
	    echo -e "\n# DTUNHostsStart\n# DTUNHostsEnd\n" >> /etc/hosts
	fi;
	if [ $UseApacheReverseProxy -eq 1 ]; then
	    chown :docker /etc/apache2/sites-available /etc/apache2/ports.conf
	    chmod g=rwX /etc/apache2/sites-available /etc/apache2/ports.conf
	    added=`cat /etc/sudoers|grep -e "%docker.*NOPASSWD.*apache2"`
	    if [ -z "$added" ]; then
		echo -e "\n# DTSudoersStart\n%docker ALL=NOPASSWD:/sbin/service apache2 reload\n%docker ALL=NOPASSWD:/usr/sbin/a2ensite \n# DTSudoersEnd\n">> /etc/sudoers
	    fi;
	fi; 
    ;;
    ddir)
	echo $DockerComposeHome/$env
    ;;
    rl)
	generateHostsFile > /tmp/hosts
	cp --preserve=mode,ownership /tmp/hosts /etc/hosts
	if [ $UseApacheReverseProxy -eq 1 ]; then
	    echo Reverse proxy reconfiguration to $ExternalIp
	    echo Listen $ExternalIp:80 >/etc/apache2/ports.conf
	    generateVHosts
	    sudo service apache2 reload && echo Reloaded Apache2
	fi;
    ;;
    mysql)
	executeApp $env mysql /var/lib/mysql mysql -u root -proot magento2
    ;;
    bash)
	executeApp $env web /app bash
    ;;
    mc)
	executeApp $env web /app mc
    ;;
    m2)
	executeApp $env web /app php bin/magento
    ;;
    up)
	executeApp $env web /app php bin/magento setup:upgrade
    ;;
    init)
	initializeDockerComposer $env $params
    ;;
    start)
	startDockerEnvironment $env
    ;;
    stop)
	stopDockerEnvironment $env
    ;;
esac;
